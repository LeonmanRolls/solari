<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1440588766888">{:repl-history {:ide [], :local [&quot;(import '(twitter4j.TwitterStreamFactory ))&quot; &quot;(.TwitterFactory)&quot; &quot;(import '(twitter4j.TwitterFactory ))&quot; &quot;(ns solari.model\n  (:require [liberator.core :refer [defresource resource request-method-in]]\n            [environ.core :refer [env]]\n            [clojure.core.async :refer [&gt;! &lt;! &gt;!! &lt;!! go chan buffer close! thread alts! alts!!]]\n            [clojure.string :as string]\n            [solari.projects :as pr]\n            [clojure.walk :as w]\n            [clojure.java.jdbc :as sql]\n            [clojure.java.jdbc.deprecated :as sql-old])\n  (:import (twitter4j TwitterFactory)))&quot; &quot;(.getSingleton (TwitterFactory.) \&quot;\&quot;)&quot; &quot;(ns solari.model\n  (:require [liberator.core :refer [defresource resource request-method-in]]\n            [environ.core :refer [env]]\n            [clojure.core.async :refer [&gt;! &lt;! &gt;!! &lt;!! go chan buffer close! thread alts! alts!!]]\n            [clojure.string :as string]\n            [solari.projects :as pr]\n            [clojure.walk :as w]\n            [clojure.java.jdbc :as sql]\n            [clojure.java.jdbc.deprecated :as sql-old])\n  (:import (twitter4j TwitterStreamFactory)))&quot; &quot;(TwitterStreamFactory.)&quot; &quot;(import 'twitter4j.TwitterStreamFactory)&quot; &quot;(import 'twitter4j.TwitterFactory)&quot; &quot;(TwitterFactory.)&quot; &quot;(.getSingleton (TwitterFactory.))&quot; &quot;(.getInstance (TwitterFactory.))&quot; &quot;(.updateStatus (.getInstance (TwitterFactory.)))&quot; &quot;(.updateStatus (.getInstance (TwitterFactory.)) \&quot;Status\&quot;)&quot; &quot;(def twitter (.getInstance (TwitterFactory.)))&quot; &quot;twitter&quot; &quot;(go (.log js/console (js-&gt;clj (&lt;! (jsonp query-url)))))&quot; &quot;(go (.log js/console (walk/keywordize-keys (js-&gt;clj (&lt;! (jsonp query-url)))) ))&quot; &quot;(go\n  (.log js/console\n        (nth (:data (walk/keywordize-keys\n          (js-&gt;clj (&lt;! (jsonp query-url))))) 0)))&quot; &quot;(defrecord galleryImage [link prelink subtitle])&quot; &quot;(defrecord GalleryImage [link prelink subtitle])&quot; &quot;(ns solari.views.common\n  (:require [secretary.core :as sec :refer-macros [defroute]]\n            [enfocus.core :as ef]\n            [enfocus.events :as ev]\n            [enfocus.effects :as eff]\n            [clojure.set :as set]\n            [om.core :as om :include-macros true]\n            [om.dom :as dom :include-macros true])\n  (:require-macros [enfocus.macros :as em]))&quot; &quot;(ns solari.views.theteam\n  (:require [secretary.core :as sec :refer-macros [defroute]]\n            [enfocus.core :as ef]\n            [enfocus.events :as ev]\n            [enfocus.effects :as eff]\n            [solari.views.common :as common]\n            [om.core :as om :include-macros true]\n            [om.dom :as dom :include-macros true])\n  (:require-macros [enfocus.macros :as em])\n  (:import solari.view.common.GaleryImage))&quot; &quot;(common/GalleryImage)&quot; &quot;(common/GalleryImage 3 4 5 )&quot; &quot;(common/GalleryImage. 3 4 5)&quot; &quot;(type (common/GalleryImage. 3 4 5))&quot; &quot;(def project-09\n  {:id [\&quot;project-09\&quot;]\n   :year [2011]\n   :projectid [\&quot;detroit\&quot;]\n   :link [\&quot;detroit\&quot;]\n   :category [\&quot;cat-multi-unit-residential\&quot;]\n   :title [\&quot;Detroit\&quot;]\n   :thumbnail [\&quot;/img/detroit/detroit-00.jpg\&quot;]\n   :gallery-images [\&quot;lyall/lyall-01.jpg\&quot; \&quot;lyall/lyall-02.jpg\&quot; \&quot;lyall/lyall-03.jpg\&quot;\n                    \&quot;lyall/lyall-04.jpg\&quot;]\n   :accordion [{:title [\&quot;Specifics\&quot;]\n                :content [[\&quot;Solari Architects is involved in a construction observation role on this Novak and Middleton design. 41 apartments. Two stages.Stage 1 (15 units) Stage 2 (26 units)\&quot;]]}\n               {:title [\&quot;Client goals and objectives\&quot;]\n                :content [[\&quot;n/a\&quot;]]}\n               {:title [\&quot;Solari's solution\&quot;]\n                :content [[\&quot;n/a\&quot;]]}\n               {:title [\&quot;Challenges\&quot;]\n                :content [[\&quot;aking on a project which documentation was originally undertaken during a less onerous regulatory environment is challenging.  Updating the documentation to meet current standards and filling in the gaps for the construction team requires the ability to work the detail whilst construction is underway. The developers timelines are still tight in spite of this extra effort.\&quot;]]}\n               {:title [\&quot;Successes\&quot;]\n                :content [[\&quot;Stage 1 has been successfully completed. Due to the high quality end product it has been easily tenanted enabling the developer to achieve cash flow while stage 2 gets underway.\&quot;]]}\n               {:title [\&quot;Testimonial\&quot;]\n                :content [[\&quot;\&quot;]] }\n               ]})&quot; &quot;(def all-data\n  (atom {:home-page-data home-page-data\n         :residential-data residential-data\n         :multi-unit-data multi-unit-data\n         :commercial-data commercial-data\n         :for-you-data for-you-data\n         :for-architects-data for-architects-data\n         :from-us-data from-us-data\n         :your-career-data your-career-data\n         :projects-data projects-data\n         :process-data process-data\n         :faqs-data faqs-data\n         :the-team-data the-team-data\n         :contact-data contact-data\n         :all-projects [pr/project-01 pr/project-02 pr/project-03 pr/project-04 pr/project-05 pr/project-06\n                        pr/project-07 pr/project-08 pr/project-09 pr/project-10 pr/project-11]\n         :sorted-state sorted-state\n         }\n         ))&quot; &quot;(def project-04\n  {:id [\&quot;project-04\&quot;]\n   :year [2014]\n   :projectid [\&quot;plimmerton\&quot;]\n   :link [\&quot;plimmerton\&quot;]\n   :category [\&quot;cat-residential\&quot;]\n   :title [\&quot;Plimmerton House\&quot;]\n   :thumbnail [\&quot;/img/plimmerton/plimmerton-00.jpg\&quot;]\n   :gallery-images [\&quot;plimmerton/plimmerton-00.jpg\&quot; \&quot;plimmerton/plimmerton-01.jp\&quot;]\n   :accordion [{:title [\&quot;Specifics\&quot;]\n                :content [[\&quot;N/A\&quot;]]}\n               {:title [\&quot;Client goals and objectives\&quot;]\n                :content [[\&quot;Design an easy-living family home that makes the most of the site overlooking the entrance to the Porirua Harbour but minimizes the negative elements of the site – steepness and being located on State highway one. \&quot;]]}\n               {:title [\&quot;Solari's solution\&quot;]\n                :content [[\&quot;We wanted to create living spaces that connected with the enviable views and provide the family with outdoor spaces on the upper of levels to give them a fantastic indoor / outdoor flow, despite being on such a steep site. This was an extensive alterations and additions project, which has grown into essentially a brand new house.\&quot;]]}\n               {:title [\&quot;Challenges\&quot;]\n                :content [[\&quot;The site is steep and is located directly on State Highway One. The design needed to elevate and separate the owner’s living space above the road to enjoy the amazing views beyond and relax in their own personal haven.\&quot;]]}\n               {:title [\&quot;Successes\&quot;]\n                :content [[\&quot;With the super structure now complete our design intent is really becoming apparent and already the owners are thrilled with direction it’s heading in.\&quot;]]}\n               {:title [\&quot;Testimonial\&quot;]\n                :content [[\&quot;\&quot;]] }\n\n               ]})&quot; &quot;(:bold (BoldNormal. [\&quot;fsdfs\&quot;] [\&quot;sdfsdf\&quot;]))&quot; &quot;(BoldNormal. [\&quot;fsdfs\&quot;] [\&quot;sdfsdf\&quot;])&quot; &quot;(str (BoldNormal. [\&quot;fsdfs\&quot;] [\&quot;sdfsdf\&quot;]))&quot; &quot;(read-string (pr-str (BoldNormal. [\&quot;fsdfs\&quot;] [\&quot;sdfsdf\&quot;])))&quot; &quot;(pr-str (BoldNormal. [\&quot;fsdfs\&quot;] [\&quot;sdfsdf\&quot;]))&quot; &quot;(def home-page-data\n  (BoldNormal. [\&quot;Come on in. We're Solari architects.\&quot;]\n              [\&quot; Our studio is based in Wellington and our thoughts, projects and experiences span New Zealand, Australia and beyond. When working with you we focus on speaking a common language  - you’ll find no architectural lingo here. We take your vision from pictures, words, half-formed or full-formed ideas and “ya knows” and translate them into architecture representative of your values, goals and personality. Our strengths lie in commercial, residential and multi-residential projects where we work on the small and the large. We’re flexible, agile and updateable but we do keep one thing consistent across the board; every project is led by YOUR vision and crafted by our tools and expertise.\&quot;]))&quot; &quot;(def home-page-data\n (pr-str (BoldNormal. [\&quot;Come on in. We're Solari architects.\&quot;]\n              [\&quot; Our studio is based in Wellington and our thoughts, projects and experiences span New Zealand, Australia and beyond. When working with you we focus on speaking a common language  - you’ll find no architectural lingo here. We take your vision from pictures, words, half-formed or full-formed ideas and “ya knows” and translate them into architecture representative of your values, goals and personality. Our strengths lie in commercial, residential and multi-residential projects where we work on the small and the large. We’re flexible, agile and updateable but we do keep one thing consistent across the board; every project is led by YOUR vision and crafted by our tools and expertise.\&quot;])) )&quot; &quot;(def home-page-data\n  (pr-str (BoldNormal. [\&quot;Come on in. We're Solari architects.\&quot;]\n              [\&quot; Our studio is based in Wellington and our thoughts, projects and experiences span New Zealand, Australia and beyond. When working with you we focus on speaking a common language  - you’ll find no architectural lingo here. We take your vision from pictures, words, half-formed or full-formed ideas and “ya knows” and translate them into architecture representative of your values, goals and personality. Our strengths lie in commercial, residential and multi-residential projects where we work on the small and the large. We’re flexible, agile and updateable but we do keep one thing consistent across the board; every project is led by YOUR vision and crafted by our tools and expertise.\&quot;])) \n  )&quot; &quot;(def home-page-data\n  (BoldNormal. [\&quot;Come on in. We're Solari architects.\&quot;]\n              [\&quot; Our studio is based in Wellington and our thoughts, projects and experiences span New Zealand, Australia and beyond. When working with you we focus on speaking a common language  - you’ll find no architectural lingo here. We take your vision from pictures, words, half-formed or full-formed ideas and “ya knows” and translate them into architecture representative of your values, goals and personality. Our strengths lie in commercial, residential and multi-residential projects where we work on the small and the large. We’re flexible, agile and updateable but we do keep one thing consistent across the board; every project is led by YOUR vision and crafted by our tools and expertise.\&quot;])\n  )&quot; &quot;(defn text-color []\n  (om/ref-cursor (:text-color (om/root-cursor all-data-atom))))&quot; &quot;all-data-atom&quot; &quot;(text-color)&quot; &quot;(ns solari.server\n  (:require [clojure.java.io :as io]\n            [solari.dev :refer [is-dev? inject-devmode-html browser-repl start-figwheel]]\n            [compojure.core :refer [GET defroutes ANY POST]]\n            [compojure.route :refer [resources]]\n            [net.cgrand.enlive-html :refer [deftemplate]]\n            [solari.model :as m]\n            [net.cgrand.reload :refer [auto-reload]]\n            [ring.middleware.reload :as reload]\n            [ring.middleware.defaults :refer [wrap-defaults api-defaults]]\n            [ring.middleware.gzip]\n            [environ.core :refer [env]]\n            [ring.adapter.jetty :refer [run-jetty]]))&quot; &quot;(ns solari.server\n  (:require [clojure.java.io :as io]\n            [solari.dev :refer [is-dev? inject-devmode-html browser-repl start-figwheel]]\n            [compojure.core :refer [GET defroutes ANY POST]]\n            [compojure.route :refer [resources]]\n            [net.cgrand.enlive-html :refer [deftemplate]]\n            [solari.model :as m]\n            [net.cgrand.reload :refer [auto-reload]]\n            [ring.middleware.reload :as reload]\n            [ring.middleware.defaults :refer [wrap-defaults api-defaults]]\n            [ring.middleware.gzip :refer [wrap-gzip]]\n            [environ.core :refer [env]]\n            [ring.adapter.jetty :refer [run-jetty]]))&quot; &quot;(def http-handler\n  (if is-dev?\n    (wrap-gzip (reload/wrap-reload (wrap-defaults #'routes api-defaults)))\n    (wrap-gzip (wrap-defaults routes api-defaults))))&quot; &quot;(ruun)&quot; &quot;(ns solari.model\n  (:require [liberator.core :refer [defresource resource request-method-in]]\n            [environ.core :refer [env]]\n            [clojure.core.async :refer [&gt;! &lt;! &gt;!! &lt;!! go chan buffer close! thread alts! alts!!]]\n            [clojure.string :as string]\n            [solari.projects :as pr]\n            [clojure.walk :as w]\n            [clojure.java.jdbc :as sql]\n            [clojure.java.jdbc.deprecated :as sql-old])\n  (:use\n    [twitter.oauth]\n    [twitter.callbacks]\n    [twitter.callbacks.handlers]\n    [twitter.api.restful])\n  (:import\n    (twitter.callbacks.protocols SyncSingleCallback)))&quot; &quot;(ns solari.model\n  (:require [liberator.core :refer [defresource resource request-method-in]]\n            [environ.core :refer [env]]\n            [clojure.core.async :refer [&gt;! &lt;! &gt;!! &lt;!! go chan buffer close! thread alts! alts!!]]\n            [clojure.string :as string]\n            [solari.projects :as pr]\n            [clojure.walk :as w]\n            [cloure.java.io :as io]\n            [clojure.java.jdbc :as sql]\n            [clojure.java.jdbc.deprecated :as sql-old])\n  (:use\n    [twitter.oauth]\n    [twitter.callbacks]\n    [twitter.callbacks.handlers]\n    [twitter.api.restful])\n  (:import\n    (twitter.callbacks.protocols SyncSingleCallback)))&quot; &quot;(GET link\n       {:format :edn\n        :handler #(do (reset! atom %) (watcher atom link))\n        :error-handler u/ajax-error-handler})&quot; &quot;(GET link\n       {:format :edn\n        :handler #(println %)\n        :error-handler u/ajax-error-handler})&quot; &quot;(GET \&quot;/brackgroundimages/\&quot; \n       {:format :edn\n        :handler #(println %)\n        :error-handler u/ajax-error-handler})&quot; &quot;(GET \&quot;/backgroundimages/\&quot; \n       {:format :edn\n        :handler #(println (first %))\n        :error-handler u/ajax-error-handler})&quot; &quot;(GET \&quot;/backgroundimages/\&quot; \n       {:format :edn\n        :handler #(println (js-&gt;clj %))\n        :error-handler u/ajax-error-handler})&quot; &quot;(GET \&quot;/backgroundimages/\&quot; \n       {:format :edn\n        :handler #(.dir js/console %)\n        :error-handler u/ajax-error-handler})&quot; &quot;(GET \&quot;/backgroundimages/\&quot; \n       {:format :edn\n        :handler #(println %)\n        :error-handler u/ajax-error-handler})&quot; &quot;(GET \&quot;/backgroundimages/\&quot;\n       {:format :edn\n        :handler #(reset! atom %)\n        :error-handler u/ajax-error-handler})&quot; &quot;(GET \&quot;/backgroundimages/\&quot;\n       {:format :edn\n        :handler #(reset! background-images %)\n        :error-handler u/ajax-error-handler})&quot; &quot;(GET \&quot;/backgroundimages/\&quot;\n       {:format :edn\n        :handler #(do (reset! background-images %) (println %))\n        :error-handler u/ajax-error-handler})&quot; &quot;(GET \&quot;/backgroundimages/\&quot;\n       {:format :edn\n        :handler #(do #_(reset! background-images %) (println %))\n        :error-handler u/ajax-error-handler})&quot; &quot;(def background-images (atom []))&quot; &quot;(GET \&quot;/backgroundimages/\&quot;\n       {:format :edn\n        :handler #(do #_(reset! background-images %) (println \&quot;recieve from server: \&quot; %))\n        :error-handler u/ajax-error-handler})&quot; &quot;(GET \&quot;/backgroundimages/\&quot;\n       {:format :edn\n        :handler #(do (reset! background-images %) (println \&quot;recieve from server: \&quot; %))\n        :error-handler u/ajax-error-handler})&quot; &quot;(GET \&quot;/backgroundimages/\&quot;\n       {:format :edn\n        :handler #(do (reset! background-images (into [] %)) (println \&quot;recieve from server: \&quot; %))\n        :error-handler u/ajax-error-handler})&quot; &quot;@background-images&quot; &quot;(ns solari.pagetemplate)&quot; &quot;(defn beget [this proto]\n  (assoc this ::prototype proto))&quot; &quot;(beget {:sub 0} {:super 1})&quot; &quot;(defn get [m k]\n  (when m\n    (if-let [[_ v] (find m k)]\n      v\n      (recur (::prototype m) k))))&quot; &quot;(defn sget [m k]\n  (when m\n    (if-let [[_ v] (find m k)]\n      v\n      (recur (::prototype m) k))))&quot; &quot;(get (beget {:sub 0} {:super 1})\n:super)&quot; &quot;(sget (beget {:sub 0} {:super 1})\n:sub)&quot; &quot;(sget (beget {:sub 0} {:super 1})\n:super)&quot; &quot;(def home-page (beget (:text \&quot;Home page text\&quot;) archemidies-page))&quot; &quot;(def archemidies-page {:background-image \&quot;/img/backgrouds/from_us.jpg\&quot; :text \&quot;Base page\&quot;})&quot; &quot;(def put assoc)&quot; &quot;(sget home-page :background-image)&quot; &quot;(sget home-page :style)&quot; &quot;(sget home-page :text)&quot; &quot;(def db\n  (env\n    :heroku-postgresql-rose-url\n    \&quot;postgresql://root:1fishy4me@localhost:5432/solari\&quot;))&quot; &quot;(ns solari.model\n  (:require [liberator.core :refer [defresource resource request-method-in]]\n            [environ.core :refer [env]]\n            [clojure.core.async :refer [&gt;! &lt;! &gt;!! &lt;!! go chan buffer close! thread alts! alts!!]]\n            [clojure.string :as string]\n            [solari.projects :as pr]\n            [clojure.walk :as w]\n            [clojure.java.io :as io]\n            [clojure.java.jdbc :as sql]\n            [clojure.java.jdbc.deprecated :as sql-old])\n  (:use\n    [twitter.oauth]\n    [twitter.callbacks]\n    [twitter.callbacks.handlers]\n    [twitter.api.restful]\n    [me.raynes.fs])\n  (:import\n    (twitter.callbacks.protocols SyncSingleCallback)))&quot; &quot;(ns solari.model\n  (:require [liberator.core :refer [defresource resource request-method-in]]\n            [environ.core :refer [env]]\n            [clojure.core.async :refer [&gt;! &lt;! &gt;!! &lt;!! go chan buffer close! thread alts! alts!!]]\n            [clojure.string :as string]\n            [solari.projects :as pr]\n            [clojure.walk :as w]\n            [clojure.java.io :as io]\n            [datomic.api :as d]\n            [clojure.java.jdbc :as sql]\n            [clojure.java.jdbc.deprecated :as sql-old])\n  (:use\n    [twitter.oauth]\n    [twitter.callbacks]\n    [twitter.callbacks.handlers]\n    [twitter.api.restful]\n    [me.raynes.fs])\n  (:import\n    (twitter.callbacks.protocols SyncSingleCallback)))&quot; &quot;(ns solari.model\n  (:require [liberator.core :refer [defresource resource request-method-in]]\n            [environ.core :refer [env]]\n            [clojure.core.async :refer [&gt;! &lt;! &gt;!! &lt;!! go chan buffer close! thread alts! alts!!]]\n            [clojure.string :as string]\n            [solari.projects :as pr]\n            [clojure.walk :as w]\n            [clojure.java.io :as io]\n            [datomic.api :as d]\n            [clojure.java.jdbc :as sql]\n            [clojure.java.jdbc.deprecated :as sql-old])\n  (:use\n    [twitter.oauth]\n    [twitter.callbacks]\n    [twitter.callbacks.handlers]\n    [twitter.api.restful]\n    #_[me.raynes.fs])\n  (:import\n    (twitter.callbacks.protocols SyncSingleCallback)))&quot; &quot;(def uri \&quot;datomic:free://localhost:4334/datomic\&quot;)&quot; &quot;(d/create-database uri)&quot; &quot;(ns solari.model\n  (:require [liberator.core :refer [defresource resource request-method-in]]\n            [environ.core :refer [env]]\n            [clojure.core.async :refer [&gt;! &lt;! &gt;!! &lt;!! go chan buffer close! thread alts! alts!!]]\n            [clojure.string :as string]\n            [solari.projects :as pr]\n            [clojure.walk :as w]\n            [clojure.java.io :as io]\n            [datomic.api :as d]\n            [me.raynes.fs :as fs]\n            [clojure.java.jdbc :as sql]\n            [clojure.java.jdbc.deprecated :as sql-old])\n  (:use\n    [twitter.oauth]\n    [twitter.callbacks]\n    [twitter.callbacks.handlers]\n    [twitter.api.restful]\n    )\n  (:import\n    (twitter.callbacks.protocols SyncSingleCallback)))&quot; &quot;(browser-repl)&quot; &quot;(+ 3 4)&quot; &quot;(run)&quot; &quot;(= 25 ( _  (fn [n] (* n n))))&quot; &quot;(= 25 ( (fn [x] (x 5))  (fn [n] (* n n))))&quot; &quot;(def test-map {:one \&quot;one\&quot; :two \&quot;two\&quot; :three \&quot;three\&quot; :four \&quot;four\&quot;})&quot; &quot;(map (fn [x] {:haha (:one test-map)}) test-map)&quot; &quot;(conj {:one \&quot;one\&quot;} {:two \&quot;two\&quot;})&quot; &quot;(into []  {:one \&quot;one\&quot;} {:two \&quot;two\&quot;})&quot; &quot;(first                                                      ;\n  (concat {:one \&quot;one\&quot;} {:two \&quot;two\&quot;}))&quot; &quot;(:one (first                                                      ;\n  (concat {:one \&quot;one\&quot;} {:two \&quot;two\&quot;})))&quot; &quot;(vec {:one \&quot;one\&quot;} {:two \&quot;two\&quot;})&quot; &quot;(concat {:one \&quot;one\&quot;} {:two \&quot;two\&quot;})&quot; &quot;(vec {:one \&quot;one\&quot;})&quot; &quot;(concat [{:one \&quot;one\&quot;} {:two \&quot;two\&quot;}] [{:three \&quot;three\&quot;} {:four \&quot;four\&quot;}])&quot; &quot;(concat '({:one \&quot;one\&quot;} {:two \&quot;two\&quot;} ) '({:three \&quot;three\&quot;} {:four \&quot;four\&quot;}))&quot;], :remote []}}</component>
</project>