<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1432291554083">{:repl-history {:ide [], :local [&quot;(ns solari.views.sidebar\n  (:require [secretary.core :as sec :refer-macros [defroute]]\n            [enfocus.core :as ef]\n            [enfocus.events :as ev]\n            [cljs.core.async :refer [put! chan &lt;! &gt;! take! close!]]\n            [solari.core :as cc]\n            [enfocus.effects :as eff]\n            [om.core :as om :include-macros true]\n            [om.dom :as dom :include-macros true])\n  (:require-macros [enfocus.macros :as em]\n                   [cljs.core.async.macros :refer [go]]))&quot; &quot;(swap! menu-map swapper)&quot; &quot;(defn home-page [data owner]\n  (reify\n    om/IRenderState\n    (render [this state]\n      (dom/h1 nil state)\n      )))&quot; &quot;(defn home-page [data owner]\n  (reify\n    om/IRenderState\n    (render [this state]\n      (dom/h1 nil (str \&quot;This is the state\&quot; state))\n      )))&quot; &quot;(defroute \&quot;/\&quot; {:as params}\n          (om/root home-page {}\n                   {:target (. js/document (getElementById \&quot;main-content-container\&quot;))}))&quot; &quot;(sec/dispatch! \&quot;/\&quot;)&quot; &quot;(defn home-page [data owner]\n  (reify\n    om/IRenderState\n    (render-state [this state]\n      (dom/h1 nil (str \&quot;This is the state\&quot; state))\n      )))&quot; &quot;(sec/dispatch!  \&quot;/\&quot;)&quot; &quot;(defn nav-menu-item-left [data owner]\n  (reify\n    om/IRenderState\n    (render [this state]\n      (dom/li nil (str \&quot;This is the state: \&quot; state))\n      #_(dom/li #js {:className (if (data :selected) \&quot;nav-left-selected\&quot; \&quot;\&quot;)} (data :text)))))&quot; &quot;(defn main-nav-view [menu-map owner]\n  (reify\n    om/IRender\n    (render [this]\n      (dom/div nil\n\n               (dom/div #js {:className \&quot;main-nav-left\&quot;}\n                        (dom/h1 #js {:className \&quot;logo\&quot;} \&quot;Solari\&quot;)\n                        (apply dom/ul #js {:className \&quot;nav-ul-left\&quot;}\n                               (om/build-all nav-menu-item-left (@menu-map :level)))\n                        #_(dom/footer #js {:id \&quot;main-footer\&quot; :className \&quot;gooter cf\&quot;}))\n\n               #_(dom/div #js {:className \&quot;main-nav-right\&quot;}\n                        (apply dom/ul #js {:className \&quot;nav-ul-right sub1 hidden\&quot;}\n                               (om/build-all nav-menu-item-right (@menu-map :sub-level1)))\n                        (apply dom/ul #js {:className \&quot;nav-ul-right sub2 hidden\&quot;}\n                               (om/build-all nav-menu-item-right (@menu-map :sub-level2)))\n                        (apply dom/ul #js {:className \&quot;nav-ul-right sub3 hidden\&quot;}\n                               (om/build-all nav-menu-item-right (@menu-map :sub-level3)))\n                        (dom/footer #js {:id \&quot;main-footer\&quot; :className \&quot;gooter cf\&quot;}))))))&quot; &quot;(defn main-nav-view [menu-map owner]\n  (reify\n    om/IRender\n    (render [this]\n      (dom/div nil\n\n               (dom/div #js {:className \&quot;main-nav-left\&quot;}\n                        (dom/h1 #js {:className \&quot;logo\&quot;} \&quot;Solari\&quot;)\n                        (apply dom/ul #js {:className \&quot;nav-ul-left\&quot;}\n                               (om/build-all nav-menu-item-left ((first @menu-map) :level)))\n                        #_(dom/footer #js {:id \&quot;main-footer\&quot; :className \&quot;gooter cf\&quot;}))\n\n               #_(dom/div #js {:className \&quot;main-nav-right\&quot;}\n                        (apply dom/ul #js {:className \&quot;nav-ul-right sub1 hidden\&quot;}\n                               (om/build-all nav-menu-item-right (@menu-map :sub-level1)))\n                        (apply dom/ul #js {:className \&quot;nav-ul-right sub2 hidden\&quot;}\n                               (om/build-all nav-menu-item-right (@menu-map :sub-level2)))\n                        (apply dom/ul #js {:className \&quot;nav-ul-right sub3 hidden\&quot;}\n                               (om/build-all nav-menu-item-right (@menu-map :sub-level3)))\n                        (dom/footer #js {:id \&quot;main-footer\&quot; :className \&quot;gooter cf\&quot;}))))))&quot; &quot;(defn nav-menu-item-left [data owner]\n  (reify\n    om/IRenderState\n    (render-state [this state]\n      (dom/li nil (str \&quot;This is the state: \&quot; state))\n      #_(dom/li #js {:className (if (data :selected) \&quot;nav-left-selected\&quot; \&quot;\&quot;)} (data :text)))))&quot; &quot;(nav-init)&quot; &quot;(reset! menu-map menu-map)&quot; &quot;(reset! menu-map @menu-map)&quot; &quot;(defn swapper [subject]\n  (map #(assoc-in % [:members :text] \&quot;blabla\&quot;) @menu-map)\n  )&quot; &quot;(map #(assoc-in % [:members :text] \&quot;blabla\&quot;) @menu-map)&quot; &quot;(map #(:level \&quot;hey\&quot;) @menu-map)&quot; &quot;(map #(assoc-in % [:members :text] \&quot;fam\&quot;) @menu-map)&quot; &quot;(map #(assoc-in % [0 :members :text] \&quot;fam\&quot;) @menu-map)&quot; &quot;(defn swapper [subject]\n  (map #(assoc-in % [0 :members :text] \&quot;blabla\&quot;) subject)\n  )&quot; &quot;(reset! menu-map swapper)&quot; &quot;(reset! menu-map (swapper @menu-map))&quot; &quot;(def menu-map (atom [{:level \&quot;top\&quot;\n                      :members [{:text \&quot;for you\&quot; :selected false}\n                                {:text \&quot;for architects\&quot; :selected false}\n                                {:text \&quot;from us\&quot; :selected false}]}\n\n                     {:level \&quot;sub1\&quot;\n                      :members [{:text \&quot;Residential\&quot; :selected false}\n                                {:text \&quot;Multi-residential\&quot; :selected false}\n                                {:text \&quot;commercial\&quot; :selected false}\n                                {:text \&quot;Our process\&quot; :selected false}\n                                {:text \&quot;FAQs\&quot; :selected false}\n                                {:text \&quot;Your team\&quot; :selected false}]}\n\n                     {:level \&quot;sub2\&quot;\n                      :memebers [{:text \&quot;Your career\&quot; :selected false}\n                                 {:text \&quot;Meet the team\&quot; :selected false}\n                                 {:text \&quot;Jobs\&quot; :selected false}]}\n\n                     {:level \&quot;sub3\&quot;\n                      :members [{:text \&quot;contact\&quot; :selecte false}]}]))&quot; &quot;{:keys [delete]}&quot; &quot;(ns solari.views.sidebar\n  (:require [secretary.core :as sec :refer-macros [defroute]]\n            [cljs.core.async :refer [put! chan &lt;!]] \n            [enfocus.core :as ef]\n            [enfocus.events :as ev]\n            [enfocus.effects :as eff]\n            [om.core :as om :include-macros true]\n            [om.dom :as dom :include-macros true])\n  (:require-macros [enfocus.macros :as em]\n                   [cljs.core.async.macros :refer [go]]))&quot; &quot;(defn nav-menu-item-left [data owner]\n  (reify\n    om/IRenderState\n    (render-state [this {:keys [delete]}]\n      (dom/li nil (do (put! delete @data) data)))))&quot; &quot;(defn main-nav-view [data owner]\n  (reify\n    om/IInitState\n    (init-state [_]\n      {:delete (chan)})\n    om/IWillMount\n    (will-mount [_]\n      (let [delete (om/get-state owner :delete)]\n        (go (loop []\n              (let [contact (&lt;! delete)]\n                (om/transact! data :contacts\n                              (fn [xs] ((println xs) xs))))))))\n    om/IRender\n    (render [this]\n      (dom/div nil\n\n               (dom/div #js {:className \&quot;main-nav-left\&quot;}\n                        (dom/h1 #js {:className \&quot;logo\&quot;} \&quot;Solari\&quot;)\n                        (apply dom/ul #js {:className \&quot;nav-ul-left\&quot;}\n                               (om/build-all nav-menu-item-left (@menu-map :top-level)\n                                             {:init-state {:delete delete}}))\n                        (dom/footer #js {:id \&quot;main-footer\&quot; :className \&quot;gooter cf\&quot;}))\n\n               #_(dom/div #js {:className \&quot;main-nav-right\&quot;}\n                        (apply dom/ul #js {:className \&quot;nav-ul-right sub1 hidden\&quot;}\n                               (om/build-all nav-menu-item-right (@menu-map :sub-level1)))\n                        (apply dom/ul #js {:className \&quot;nav-ul-right sub2 hidden\&quot;}\n                               (om/build-all nav-menu-item-right (@menu-map :sub-level2)))\n                        (apply dom/ul #js {:className \&quot;nav-ul-right sub3 hidden\&quot;}\n                               (om/build-all nav-menu-item-right (@menu-map :sub-level3)))\n                        (dom/footer #js {:id \&quot;main-footer\&quot; :className \&quot;gooter cf\&quot;}))))))&quot; &quot;(:contacts {})&quot; &quot;(:contacts {:hi \&quot;there\&quot;})&quot; &quot;(sec/dispatch! \&quot;/yourteam\&quot;)&quot; &quot;(left-nav-listener)&quot; &quot;(sec/dispatch! \&quot;/residential\&quot;)&quot; &quot;(sec/dispatch! \&quot;/faqs\&quot;)&quot; &quot;(defn right-nav-listener []\n (ef/at \&quot;.nav-ul-right\&quot;\n        (ev/listen-live :click \&quot;li\&quot; #(let [text (.-innerText (.-currentTarget %))]\n                                      (println \&quot;hi there guys\&quot; (.-currentTarget %))\n                           #_(toggle-main-menu (.-currentTarget %))\n                           (cond\n                             (not= -1 (.indexOf text \&quot;residential\&quot;)) (sec/dispatch! \&quot;/residential\&quot;)\n                             (not= -1 (.indexOf text \&quot;architects\&quot;)) (sec/dispatch! \&quot;/faqs\&quot;)\n                             (not= -1 (.indexOf text \&quot;us\&quot;)) (sec/dispatch! \&quot;/faqs\&quot;)\n                             :else \&quot;list item not there\&quot;))))\n  )&quot; &quot;(right-nav-listener)&quot; &quot;(sec/dispatch! \&quot;/multi-residential\&quot;)&quot; &quot;(defroute \&quot;/meet-the-team\&quot; {:as params}\n          (om/root mee-the-team-page {}\n                   {:target (. js/document (getElementById \&quot;main-content-container\&quot;))}))&quot; &quot;(defn meet-the-team-page [data owner]\n  (reify\n    om/IRender\n    (render [this]\n      (dom/h1 nil \&quot;This is the meet your team page\&quot;))))&quot; &quot;(defroute \&quot;/meet-the-team\&quot; {:as params}\n          (om/root meet-the-team-page {}\n                   {:target (. js/document (getElementById \&quot;main-content-container\&quot;))}))&quot; &quot;(sec/dispatch! \&quot;/meet-the-team\&quot;)&quot; &quot;(ns solari.views.sidebar\n  (:require [secretary.core :as sec :refer-macros [defroute]]\n            [enfocus.core :as ef]\n            [enfocus.events :as ev]\n            [enfocus.effects :as eff]\n            [om.core :as om :include-macros true]\n            [om.dom :as dom :include-macros true])\n  (:require-macros [enfocus.macros :as em]))&quot; &quot;(defn home-page [data owner]\n  (reify\n    om/IRender\n    (render [this]\n      (dom/div #js {:className \&quot;row\&quot;}\n              (dom/div #js {:className \&quot;col-xs-1\&quot;})\n               (dom/div #js {:className \&quot;col-xs-10\&quot;}\n                        (dom/h1 nil \&quot;Hi doggy\&quot;))\n               (dom/div #js {:className \&quot;col-xs-1\&quot;})\n               )\n      )))&quot; &quot;(ns solari.views.home\n  (:require [secretary.core :as sec :refer-macros [defroute]]\n            [enfocus.core :as ef]\n            [enfocus.events :as ev]\n            [enfocus.effects :as eff]\n            [om.core :as om :include-macros true]\n            [om.dom :as dom :include-macros true])\n  (:require-macros [enfocus.macros :as em]))&quot; &quot;(ns solari.core\n  (:require [secretary.core :as sec :refer-macros [defroute]]\n            [solari.views.sidebar :as sb]\n            [solari.views.home :as home]\n            [om.core :as om :include-macros true]\n            [om.dom :as dom :include-macros true]\n            [goog.events :as events]\n            [goog.history.EventType :as EventType]\n            [enfocus.core :as ef])\n  (:require-macros [enfocus.macros :as em])\n  (:import goog.History))&quot; &quot;(defroute \&quot;/residential\&quot; {:as params}\n          (do\n            (om/root residential-page {}\n                   {:target (. js/document (getElementById \&quot;main-content-container\&quot;))})\n            (ef/at \&quot;body\&quot; (ef/set-attr :background \&quot;residential\&quot;))\n            )\n          )&quot; &quot;(def menu-map (atom {:top-level [\&quot;for you\&quot; \&quot;for architects\&quot; \&quot;from us\&quot;]\n                     :sub-level1 [\&quot;Residential\&quot; \&quot;Multi-Residential\&quot; \&quot;Commercial\&quot; \&quot;Our Process\&quot; \&quot;FAQs\&quot; \&quot;Your Team\&quot;]\n                     :sub-level2 [\&quot;Your Career\&quot; \&quot;Meet the team\&quot; \&quot;Jobs\&quot;]\n                     :sub-level3 [\&quot;contact\&quot;]}))&quot; &quot;@menu-map&quot; &quot;(@menu-map :top-level)&quot; &quot;(loop [count 0]\n  (if (&gt; count 5)\n   (fn [_]) \n   (recur)))&quot; &quot;(loop [count 0]\n  (if (&gt; count 5)\n   (fn [_]) \n   (recur (inc count))))&quot; &quot;(loop [count 0]\n  (if (&gt; count 5)\n   (fn [_] (println )) \n   (recur (inc count))))&quot; &quot;(\n  (loop [count 0]\n  (if (&gt; count 5)\n   (fn [x] (println x)) \n   (recur (inc count))))\n  \n  )&quot; &quot;(\n\n  (loop [count 0]\n    (if (&lt; count 5)\n      (fn [x] (println x))\n      (recur (inc count))))\n  \n  )&quot; &quot;menu-map&quot; &quot;(:top-level menu-map)&quot; &quot;([:top-level]  @menu-map)&quot; &quot;(loop [count 0]\n  (if (&lt; count 5)\n   (fn [x] (println x)) \n   (recur (inc count))))&quot; &quot;(loop [count 0]\n  (if (&lt; count 5)\n   (fn [x] x) \n   (recur (inc count))))&quot; &quot;(:sub-level @menu-map)&quot; &quot;(:sub-level2 @menu-map)&quot; &quot;(:sub-level3 @menu-map)&quot; &quot;(:sub-level1 @menu-map)&quot; &quot;(:top-level @menu-map)&quot; &quot;(def test {:one {:two \&quot;two\&quot;}})&quot; &quot;(:one bla)&quot; &quot;(:two (:one bla))&quot; &quot;(def bla {:one {:two \&quot;two\&quot;}})&quot; &quot;(-&gt; bla :one)&quot; &quot;(-&gt; bla :two)&quot; &quot;(-&gt; bla :one :two)&quot; &quot;(loop [count 0]\n  (if (&gt; count 5)\n   (fn [x] x) \n   (recur (inc count))))&quot; &quot;(loop [count 0]\n  (if (&gt; count 5)\n   (fn [x] (println xx)) \n   (recur (inc count))))&quot; &quot;(loop [count 0]\n  (if (&gt; count 5)\n   (fn [x] (println x)) \n   (recur (inc count))))&quot; &quot;(loop [count 0]\n  (when (&gt; count 5)\n   (fn [x] (println x)) \n   (recur (inc count))))&quot; &quot;(loop [count 0]\n  (when (&lt; count 5)\n   (fn [x] (println x)) \n   (recur (inc count))))&quot; &quot;(loop [x 10]\n  (when (&gt; x 1)\n    (println x)\n    (recur (- x 2))))&quot; &quot;(defn left-nav-listener []\n  (ef/at \&quot;.logo\&quot;\n         (ev/listen :click  #((do\n                                (sec/dispatch! \&quot;/\&quot;)\n                                (ef/at \&quot;.nav-ul-left li\&quot; (ef/remove-class \&quot;nav-left-selected\&quot;))\n                                (ef/at \&quot;.nav-ul-right\&quot; (ef/add-class \&quot;hidden\&quot;))))))\n\n  (ef/at \&quot;.nav-ul-left\&quot;\n         (ev/listen-live :click \&quot;li\&quot;\n                         #(let [text (.-innerText (.-currentTarget %))]\n                           (println text)\n                           (toggle-main-menu (.-currentTarget %))\n                           (cond\n                             (not= -1 (.indexOf text \&quot;you\&quot;)) (toggle-submenu \&quot;sub1\&quot;)\n                             (not= -1 (.indexOf text \&quot;architects\&quot;)) (toggle-submenu \&quot;sub2\&quot;)\n                             (not= -1 (.indexOf text \&quot;us\&quot;)) (toggle-submenu \&quot;sub3\&quot;)\n                             :else \&quot;list item not there\&quot;)))))&quot; &quot;(defn left-nav-listener []\n  (ef/at \&quot;.logo\&quot;\n         (ev/listen :click  #((do\n                                (sec/dispatch! \&quot;/\&quot;)\n                                (ef/at \&quot;.nav-ul-left li\&quot; (ef/remove-class \&quot;nav-left-selected\&quot;))\n                                (ef/at \&quot;.nav-ul-right\&quot; (ef/add-class \&quot;hidden\&quot;))))))\n\n  (ef/at \&quot;.nav-ul-left\&quot;\n         (ev/listen-live :click \&quot;li\&quot;\n                         #(let [text (.-innerText (.-currentTarget %))]\n                           (.dir js/console %)\n                           (toggle-main-menu (.-currentTarget %))\n                           (cond\n                             (not= -1 (.indexOf text \&quot;you\&quot;)) (toggle-submenu \&quot;sub1\&quot;)\n                             (not= -1 (.indexOf text \&quot;architects\&quot;)) (toggle-submenu \&quot;sub2\&quot;)\n                             (not= -1 (.indexOf text \&quot;us\&quot;)) (toggle-submenu \&quot;sub3\&quot;)\n                             :else \&quot;list item not there\&quot;)))))&quot; &quot;(sec/set-config! :prefix \&quot;#\&quot;)&quot; &quot;(let [history (History.)\n      navigation EventType/NAVIGATE]\n  (goog.events/listen history\n                      navigation\n                      #(-&gt; % .-token sec/dispatch!))\n  (doto history (.setEnabled true)))&quot; &quot;(let [history (History.)\n      navigation EventType/NAVIGATE]\n  (goog.events/listen history\n                      navigation\n                      #(println %)\n                      #_(-&gt; % .-token sec/dispatch!))\n  (doto history (.setEnabled true)))&quot; &quot;(defroute \&quot;\&quot; {:as params}\n          (do\n            (om/root home-page {}\n                   {:target (. js/document (getElementById \&quot;main-content-container\&quot;))})\n            (ef/at \&quot;body\&quot; (ef/set-attr :background \&quot;home\&quot;))\n            (ef/at \&quot;.context\&quot; (ef/content \&quot;Welcome\&quot;))\n            (js/blabla)))&quot; &quot;(let [history (History.)\n      navigation EventType/NAVIGATE]\n  (goog.events/listen history\n                      navigation\n                      #(.dir js/console %)\n                      #_(-&gt; % .-token sec/dispatch!))\n  (doto history (.setEnabled true)))&quot; &quot;(let [history (History.)\n      navigation EventType/NAVIGATE]\n  (goog.events/listen history\n                      navigation\n                      #_(.dir js/console %)\n                      #(-&gt; % .-token sec/dispatch!))\n  (doto history (.setEnabled true)))&quot; &quot;(let [history (History.)\n      navigation EventType/NAVIGATE]\n  (goog.events/listen history\n                      navigation\n                      #_(.dir js/console %)\n                      #(-&gt; % .-token sec/dispatch!))\n                      (doto history (.setEnabled true)))&quot; &quot;(let [history (History.)\n      navigation EventType/NAVIGATE]\n  (goog.events/listen history\n                      navigation\n                      #(.dir js/console (-&gt; % .-token sec/dispatch!))\n                      #_(-&gt; % .-token sec/dispatch!))\n                      (doto history (.setEnabled true)))&quot; &quot;(let [history (History.)\n      navigation EventType/NAVIGATE]\n  (goog.events/listen history\n                      navigation\n                      #_(.dir js/console (-&gt; % .-token sec/dispatch!))\n                      #(-&gt; % .-token sec/dispatch!))\n                      (doto history (.setEnabled true)))&quot; &quot;(let [history (History.)\n      navigation EventType/NAVIGATE]\n  (goog.events/listen history\n                      navigation\n                      #(.dir js/console (.-token %))\n                      #_(-&gt; % .-token sec/dispatch!))\n                      (doto history (.setEnabled true)))&quot; &quot;(let [history (History.)\n      navigation EventType/NAVIGATE]\n  (goog.events/listen history\n                      navigation\n                      #(.dir js/console %)\n                      #_(-&gt; % .-token sec/dispatch!))\n                      (doto history (.setEnabled true)))&quot; &quot;(println \&quot;hi ther\n\&quot;)&quot; &quot;(secretary/dispatch! \&quot;/users/gf3\&quot;)&quot; &quot;(secretary/dispatch! \&quot;/users/32432423\&quot;)&quot; &quot;(ns views.sidebar\n  (:require [secretary.core :as secretary :refer-macros [defroute]]\n            [enfocus.core :as ef]\n            [goog.events :as events]\n            [om.core :as om :include-macros true]\n            [om.dom :as dom :include-macros true])\n  (:require-macros [enfocus.macros :as em]))&quot; &quot;(browser-repl)&quot; &quot;(em/at \&quot;#main-nav-container\&quot;\n       (ev/listen-live :click \&quot;li3\&quot;\n                       #(ef/at (.-currentTarget %)\n                               (ef/content \&quot;I have been replaced\&quot;))))&quot; &quot;{:a \&quot;a\&quot; :b \&quot;b\&quot;}&quot; &quot;(def bla {:a \&quot;a\&quot; :b \&quot;b\&quot;})&quot; &quot;(:a bla)&quot; &quot;(bla :a)&quot; &quot;(run)&quot;], :remote []}}</component>
</project>